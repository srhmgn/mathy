{"version":3,"sources":["constants.js","utils/build-items.js","utils/drag.js","utils/calc.js","Box.js","App.js","serviceWorker.js","index.js"],"names":["OPS","+","x","y","-","×","÷","TYPES","OP_FUNCS","Object","values","randomInt","Math","ceil","random","findAnAnswer","ints","answer","hasLameDivision","ops","forEach","int","i","op","items","floor","length","push","undefined","build_items","map","_findAnAnswer","_findAnAnswer2","slicedToArray","every","includes","_findAnAnswer3","_findAnAnswer4","shuffled","a","copy","toConsumableArray","j","_ref","shuffle","value","type","onDragOver","e","preventDefault","getValue","_items$map","_items$map2","int1","op1","int2","op2","int3","op3","int4","Box","children","draggable","onDragStart","onDrop","react_default","createElement","className","concat","App","_buildItems","buildItems","_buildItems2","originalItems","originalAnswer","_useState","useState","_useState2","setItems","_useState3","_useState4","setAnswer","_useState5","_useState6","drag","setDrag","_useState7","_useState8","canDrag","setCanDrag","didWin","useEffect","setTimeout","_buildItems3","_buildItems4","newItems","newAnswer","keys","src_Box_0","el","target","key","item","stopPropagation","intIdx","swapInts","dropOp","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a5f33bfa.chunk.js","sourcesContent":["const add = (x, y) => x + y;\nconst subtract = (x, y) => x - y;\nconst multiply = (x, y) => x * y;\nconst divide = (x, y) => x / y;\n\nexport const OPS = {\n  '+': add,\n  '-': subtract,\n  '×': multiply,\n  '÷': divide,\n};\n\nexport const TYPES = {\n  INT: 'int',\n  OP: 'op',\n  EQUALS: 'equals',\n  ANSWER: 'answer',\n};\n","import { OPS, TYPES } from '../constants';\n\nconst NO_OP = '';\nconst OP_FUNCS = Object.values(OPS);\n\nconst randomInt = () => Math.ceil(Math.random() * 8) + 1;\n\nconst shuffle = (a) => {\n  const copy = [...a];\n  for (let i = copy.length - 1; i > 0; i -= 1) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [copy[i], copy[j]] = [copy[j], copy[i]];\n  }\n  return copy;\n};\n\nconst pickRandom = items => items[Math.floor(Math.random() * items.length)];\n\nconst findAnAnswer = (ints) => {\n  let answer = ints[0];\n  let hasLameDivision = false;\n  const ops = [];\n\n  ints.forEach((int, i) => {\n    if (!hasLameDivision && i !== 0) {\n      const op = pickRandom(OP_FUNCS);\n      answer = op(answer, int);\n      ops.push(op);\n    }\n\n    hasLameDivision = i === 1 && ints[0] / ints[1] === 1;\n  });\n\n  return hasLameDivision ? [0, undefined] : [answer, ops];\n};\n\nexport default () => {\n  const ints = [1, 2, 3, 4].map(randomInt);\n\n  let [answer, ops] = findAnAnswer(ints);\n  while (\n    answer % 1 !== 0 || answer < 1 || answer > 40\n    || ops.every(op => [OPS['+'], OPS['-']].includes(op))\n  ) {\n    [answer, ops] = findAnAnswer(ints);\n  }\n\n  const shuffled = shuffle(ints);\n\n  return [\n    [\n      {\n        value: shuffled[0],\n        type: TYPES.INT,\n      },\n      {\n        value: NO_OP,\n        type: TYPES.OP,\n      },\n      {\n        value: shuffled[1],\n        type: TYPES.INT,\n      },\n      {\n        value: NO_OP,\n        type: TYPES.OP,\n      },\n      {\n        value: shuffled[2],\n        type: TYPES.INT,\n      },\n      {\n        value: NO_OP,\n        type: TYPES.OP,\n      },\n      {\n        value: shuffled[3],\n        type: TYPES.INT,\n      },\n    ],\n    answer,\n  ];\n};\n","export const onDragOver = (e) => {\n  e.preventDefault();\n};\n\nexport default {\n  onDragOver,\n};\n","import { OPS } from '../constants';\n\nexport const getValue = (items) => {\n  let value;\n  const [\n    int1,\n    op1,\n    int2,\n    op2,\n    int3,\n    op3,\n    int4,\n  ] = items.map(i => i.value);\n\n  if (OPS[op1] && OPS[op2] && OPS[op3]) {\n    value = OPS[op1](int1, int2);\n    value = OPS[op2](value, int3);\n    value = OPS[op3](value, int4);\n  }\n\n  return value;\n};\n\nexport default {\n  getValue,\n};\n","import React from 'react';\nimport './Box.css';\n\nconst Box = ({\n  children,\n  draggable,\n  onDragOver,\n  onDragStart,\n  onDrop,\n  type,\n}) => (\n  <div\n    className={`box box--${type}`}\n    onDragOver={onDragOver}\n    onDrop={onDrop}\n  >\n    <div\n      className=\"box-content\"\n      draggable={draggable}\n      onDragStart={onDragStart}\n    >\n      {children}\n    </div>\n  </div>\n);\n\nexport default Box;\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\n\nimport buildItems from './utils/build-items';\nimport { onDragOver } from './utils/drag';\nimport { getValue } from './utils/calc';\nimport { OPS, TYPES } from './constants';\nimport Box from './Box';\n\nconst App = () => {\n  const [originalItems, originalAnswer] = buildItems();\n  const [items, setItems] = useState(originalItems);\n  const [answer, setAnswer] = useState(originalAnswer);\n  const [drag, setDrag] = useState({});\n  const [canDrag, setCanDrag] = useState(true);\n\n  const value = getValue(items);\n  const didWin = value === answer;\n\n  useEffect(() => {\n    if (didWin) {\n      if (canDrag) {\n        setCanDrag(false);\n      } else {\n        setTimeout(\n          () => {\n            const [newItems, newAnswer] = buildItems();\n            setItems(newItems);\n            setAnswer(newAnswer);\n          },\n          1000,\n        );\n      }\n    } else if (!canDrag) {\n      setCanDrag(true);\n    }\n  });\n\n  const swapInts = (e, i, j) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (drag.intIdx === undefined) return;\n\n    const copy = [...items];\n    [copy[i], copy[j]] = [copy[j], copy[i]];\n    setItems(copy);\n  };\n\n  const dropOp = (e, i) => {\n    e.preventDefault();\n    const copy = [...items];\n    copy[i].value = drag.op;\n    setItems(copy);\n  };\n\n  const renderItem = (item, i) => {\n    if (item.type === TYPES.INT) {\n      return (\n        <Box\n          onDragOver={onDragOver}\n          onDrop={e => swapInts(e, drag.intIdx, i)}\n          key={i}\n          draggable={canDrag}\n          onDragStart={e => setDrag({ el: e.target, intIdx: i })}\n          type={item.type}\n        >\n          {item.value}\n        </Box>\n      );\n    }\n    return (\n      <Box\n        onDragOver={onDragOver}\n        onDrop={e => dropOp(e, i)}\n        key={i}\n        type={item.type}\n      >\n        {item.value}\n      </Box>\n    );\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"list list--op\">\n        {Object.keys(OPS).map(op => (\n          <Box\n            draggable={canDrag}\n            onDragStart={e => setDrag({ el: e.target, op })}\n            key={op}\n            type={TYPES.OP}\n          >\n            {op}\n          </Box>\n        ))}\n      </div>\n      <div className=\"list list--main\">\n        {items.map(renderItem)}\n        <Box type={TYPES.EQUALS}>=</Box>\n        <Box type={TYPES.ANSWER}>{answer}</Box>\n      </div>\n      <div>{didWin && 'You won!'}</div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}